# A config file for pre-commit.com
#
# Install pre-commit.com: https://pre-commit.com/#install
#
# Then run the following line to set up a pre-commit hook:
# pre-commit install
#
# And this to update hooks to the newest version:
# pre-commit autoupdate
#
# Now, whenever you try to commit, hooks defined in this file would run
# and check your files.  They would run only only on staged files that
# had changes.
#
# You can manually trigger the hooks like this:
# pre-commit run
#
# You can tell it to check specific files:
# pre-commit run --files *.ts
#
# Or give it all files:
# pre-commit run --all-files
#
# Finally, you can disable some hooks by listing them in the `SKIP`
# variable. Example:
# SKIP=flake8,black git commit -m "foo"

#default_language_version:
#  python: python3
#default_stages:
#  - commit
#  - merge-commit
exclude: ^(data|.idea|obsolete)
repos:
#  - repo: local
#    hooks:
#      - id: tests
#        name: Input data tester
#        description: Run tests to check input data and basic read/write functions
#        entry: /bin/bash -c "(cd bison; . venv/bin/activate; python3 test/test_riis_resolve.py)"
#        language: script
#        pass_filenames: false

  - repo: https://github.com/maxxxxxdlp/pre-commit
    rev: v1.0.6
    hooks:
      - id: regex-blacklist
        args:
          - pre-commit-config/regex-blacklist.txt

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.1.0
    hooks:
    -   id: check-yaml
    -   id: end-of-file-fixer
    -   id: trailing-whitespace
    -   id: check-added-large-files

  - repo: https://github.com/pycqa/flake8
    rev: 4.0.1
    hooks:
    - id: flake8
      args:
        # these settings are needed to make flake8 compatible with black
        - --max-line-length=88
        - --select=C,E,F,W,B,B950
        - --extend-ignore=E203,E501
      additional_dependencies:
        - flake8-bugbear

  - repo: https://github.com/terrencepreilly/darglint
    rev: v1.8.1
    hooks:
    - id: darglint
      args: ['-v2', '-sgoogle']

  - repo: https://github.com/PyCQA/pydocstyle
    rev: 6.1.1
    hooks:
    - id: pydocstyle
      args: ['--convention=google']

  - repo: https://github.com/asottile/pyupgrade
    rev: v2.29.1
    hooks:
      - id: pyupgrade

  - repo: https://github.com/asottile/setup-cfg-fmt
    rev: v1.20.0
    hooks:
      - id: setup-cfg-fmt

  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.2.2
    hooks:
      - id: python-safety-dependencies-check

  # Checkitout
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.2.2
    hooks:
      - id: python-safety-dependencies-check

#- repo: https://github.com/PyCQA/isort
#    rev: 5.10.1
#    hooks:
#    - id: isort
#      args: [--sp=pre-commit-config/.isort.cfg, --diff]
#
#- repo: https://github.com/PyCQA/pylint
#    rev: pylint-2.7.3
#    hooks:
#    - id: pylint
#      args: [--rcfile=.github/linters/.python-lint]
#
#- repo: https://github.com/psf/black
#    rev: 21.12b0
#    hooks:
#    -   id: black
#        args: [--line-length=88]
#
#  - repo: local
#    hooks:
#      - id: mypy
#        name: mypy
#        description: Python mypy typechecker
#        entry: /bin/bash -c "docker exec --tty specify7_specify7_1 bash -c 'VIRTUAL_ENV=./ve make typecheck'"
#        language: script
#        types: [python]
#        pass_filenames: false
#
#- repo: https://github.com/markdownlint/markdownlint
#  rev: v0.11.0
#  hooks:
#    - id: markdownlint
#      files: \.md$
#      args:
#        - --git-recurse
